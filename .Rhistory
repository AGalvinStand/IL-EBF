}
ifelse(ebf_base_calc$final_percent_adequacy < y, (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources, 0)
}
gap(.7)
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
ifelse(ebf_base_calc$final_percent_adequacy < y,cumsum(ebf_base_calc$gap),0)
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy)]
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy),]
glimpse(ebf_base_calc)
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy),]
ebf_base_calc <- ebf_base_calc[order(ebf_base_calc$final_percent_adequacy),]
ebf_base_calc <- ebf_base_calc |>
mutate(id = row_number())
View(ebf_base_calc)
row_number()
row_number(ebf_base_calc)
ebf_base_calc <- cbind(id=1:nrow(ebf_base_calc),ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
rownames(ebf_base_calc) <- 1:nrow(ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
mutate(id = 1:n())
ebf_base_calc2 <- ebf_base_calc |>
mutate(id = 1:n())
ebf_base_calc <- ebf_base_calc |>
mutate(id2 = 1:n())
ebf_base_calc <- ebf_base_calc |>
mutate(id2 = seq_len(n()))
source("scripts/ebf_base_calc.R")
ebf_base_calc %>% mutate(id = seq_along(final_percent_adequacy))
ebf_base_calc <- ebf_base_calc[order(ebf_base_calc$final_percent_adequacy),]
ebf_base_calc$id <- 1:nrow(ebf_base_calc)
View(ebf_base_calc)
gap <- function(y) {
ifelse(ebf_base_calc$final_percent_adequacy < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)))
}
gap(.7)
gap(.67)
gap(0.693572181637349)
ebf_base_calc <- ebf_base_calc[order(ebf_base_calc$adequacy_funding_level),]
ebf_base_calc$id <- 1:nrow(ebf_base_calc)
gap <- function(y) {
ifelse(ebf_base_calc$adequacy_funding_level < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)))
}
gap(0.693572181637349)
gap <- function(y) {
ifelse(ebf_base_calc$adequacy_funding_level < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)),0)
}
gap(0.693572181637349)
ebf_base_calc$blah <- (.6*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level <.6 ~ ((.6*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
sum(ebf_base_calc$blah)
sum(ebf_base_calc$blah,na.rm = TRUE)
gap <- function(y) {
ifelse(ebf_base_calc$adequacy_funding_level < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,na.rm = TRUE)),0)
}
gap(0.693572181637349)
#gap(0.693572181637349)
gap(.6)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
}
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah))
}
gap(.6)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
}
gap(.6)
gap(0.693572181637349)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
ebf_base_calc$tier1flag <- case_when(ebf_base_calc$adequacy_funding_level < y ~ 1,
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
}
gap(0.693572181637349)
View(ebf_base_calc)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
tier1cutoff <- y
}
gap(0.693572181637349)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
gap(0.6942236)
tr(200000000, 0.600000000000000, .800000000000000)
gap(0.6667053)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
}
gap(0.6667053)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(200000000, 0.600000000000000, .800000000000000)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.0000000000001)
}
tr(200000000, 0.600000000000000, .800000000000000)
gap(0.6666971)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr(200000000, 0.600000000000000, .800000000000000)
tr(200000000, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000,
1)
gap(0.6666972) # test out the the funding adequacy level cut off
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr(200000000, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
tr(500000000, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
gap(0.6942345) # test out the the funding adequacy level cut off
gap(.8)
print(500000000-499999842)
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1ar <- t1naa/.3 # tier 1 appropriation rate (30% of funding gap)
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr(t1ar, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
gap(0.6942345) # test out the the funding adequacy level cut off
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
# This finals
targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the hig
gap(0.6942345) # test out the the funding adequacy level cut off
print(t1fg - gap(0.6942345)) # this will tell you how off we are
# PURPOSE ---------
#   Function to determine tier 1 ratio.
# PREPARED BY ------
# Chris Poulos
# 2022-10-19
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
# This finals
targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
gap(0.6942345) # test out the the funding adequacy level cut off
print(t1fg - gap(0.6942345)) # this will tell you how off we are, it should be 0
print($minimum)
print(targetratio$minimum)
t1tr <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
View(t1tr)
a <- t1tr[c(3,2)]
View(a)
View(t1tr)
View(t1tr)
glimpse(t1tr)
a <- t1tr$minimum[2]
a <- t1tr$minimum[3]
a <- t1tr$minimum
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum
ris Poulos
# 2022-10-19
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
# This finals
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum
ris Poulos
# 2022-10-19
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
# This finals
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum
gap(t1tr) # test out the the funding adequacy level cut off
print(t1fg - gap(t1tr)) # this will tell you how off we are, it should be 0
View(ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < t1tr ~ 1,
adequacy_funding_level > t1tr & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
glimpse(ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < t1tr ~ 1,
adequacy_funding_level > t1tr & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = "TEST")
print(ebf_base_calc$adequacy_funding_level[5] < t1tr)
print(ebf_base_calc$adequacy_funding_level[5])
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(ebf_base_calc$adequacy_funding_level < t1tr ~ 1,
ebf_base_calc$adequacy_funding_level > t1tr & ebf_base_calc$adequacy_funding_level < .9 ~ 2,
ebf_base_calc$adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
ebf_base_calc$adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
# PURPOSE ---------
#   Function to determine tier 1 ratio.
# PREPARED BY ------
# Chris Poulos
# 2022-10-19
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# tier 1 target ratio threshold function
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
gap(t1tr) # test out the the funding adequacy level cut off
print(t1fg - gap(t1tr)) # this will tell you how off we are, it should be 0
# use the target ratio to assign tiers (THIS ISN'T WORKING)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(ebf_base_calc$adequacy_funding_level < t1tr ~ 1,
ebf_base_calc$adequacy_funding_level > t1tr & ebf_base_calc$adequacy_funding_level < .9 ~ 2,
ebf_base_calc$adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
ebf_base_calc$adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < t1tr ~ 1,
adequacy_funding_level > t1tr & ebf_base_calc$adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ 0)
>
fsdf
sdfds
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
print(t1tr)
print(as.numeric(t1tr))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 0.69 ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
FALSE ~ 5))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ 0))
rlang::last_error()
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < 0.9 ~ 2,
adequacy_funding_level > 0.9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level > as.numeric(t1tr) ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level > as.numeric(t1tr) ~ 1,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < as.numeric(.9) ~ 2,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0))
unique(ebf_base_calc$tiers)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t2fg = case_when(tiers < 2 ~ (.9*final_adequacy_target)-final_resources))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t2fg = case_when(tiers < 2 ~ (.9*final_adequacy_target)-final_resources))
# Calculate tier 2 allocation rate
t2funding <- naa*.49
t2fgsum <- sum(t2fg,na.rm == T)
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg,na.rm == T)
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t2fg = case_when(tiers < 2 ~ ((.9*final_adequacy_target)-final_resources)-(1- final_adj_lct)))
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
t2allocationrate <- t2funding
t2allocationrate <- t2funding/t2fgsum
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t1fundinggap = case_when(tiers == 1 ~ (t1tr*final_adequacy_target)-final_resources)) |>
mutate(t1funding = case_when(tiers == 1 ~ t1fundinggap * .3)) |>## ADD TIER 1`FUNDING AND FUNDING GAP.
mutate(t2fg = case_when(tiers < 2 ~ ((.9*final_adequacy_target)-final_resources-t1funding)-(1- final_adj_lct)))
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t1fundinggap = case_when(tiers == 1 ~ (t1tr*final_adequacy_target)-final_resources)) |>
mutate(t1funding = case_when(tiers == 1 ~ t1fundinggap * .3)) |>.
mutate(t2fg = case_when(tiers < 3 ~ ((.9*final_adequacy_target)-final_resources-t1funding)-(1- final_adj_lct)))
# Calculate tier 2 allocation rate
# LOOK INTO THE tier 2 funding/funding gap equations -----
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
sum(ebf_base_calc$t1fundinggap)
sum(ebf_base_calc$t1fundinggap,na.rm = T)
print(500000000-(sum(ebf_base_calc$t1fundinggap,na.rm = T)))
if(ebf_base_calc$tier == 1) {nrow(ebf_base_calc$tiers)}
