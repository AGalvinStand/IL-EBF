# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
# This finals
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum
ris Poulos
# 2022-10-19
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
# This finals
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum
gap(t1tr) # test out the the funding adequacy level cut off
print(t1fg - gap(t1tr)) # this will tell you how off we are, it should be 0
View(ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < t1tr ~ 1,
adequacy_funding_level > t1tr & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
glimpse(ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < t1tr ~ 1,
adequacy_funding_level > t1tr & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = "TEST")
print(ebf_base_calc$adequacy_funding_level[5] < t1tr)
print(ebf_base_calc$adequacy_funding_level[5])
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(ebf_base_calc$adequacy_funding_level < t1tr ~ 1,
ebf_base_calc$adequacy_funding_level > t1tr & ebf_base_calc$adequacy_funding_level < .9 ~ 2,
ebf_base_calc$adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
ebf_base_calc$adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
# PURPOSE ---------
#   Function to determine tier 1 ratio.
# PREPARED BY ------
# Chris Poulos
# 2022-10-19
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# tier 1 target ratio threshold function
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
gap(t1tr) # test out the the funding adequacy level cut off
print(t1fg - gap(t1tr)) # this will tell you how off we are, it should be 0
# use the target ratio to assign tiers (THIS ISN'T WORKING)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(ebf_base_calc$adequacy_funding_level < t1tr ~ 1,
ebf_base_calc$adequacy_funding_level > t1tr & ebf_base_calc$adequacy_funding_level < .9 ~ 2,
ebf_base_calc$adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
ebf_base_calc$adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < t1tr ~ 1,
adequacy_funding_level > t1tr & ebf_base_calc$adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ 0)
>
fsdf
sdfds
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ NA))
print(t1tr)
print(as.numeric(t1tr))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 0.69 ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < 1 ~ 1,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
FALSE ~ 5))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ 0))
rlang::last_error()
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < 0.9 ~ 2,
adequacy_funding_level > 0.9 & ebf_base_calc$adequacy_funding_level < 1 ~ 3,
adequacy_funidng_level > 1 ~ 4,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level > as.numeric(t1tr) ~ 1,
FALSE ~ NA))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level > as.numeric(t1tr) ~ 1,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < as.numeric(.9) ~ 2,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
FALSE ~ 0))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0))
unique(ebf_base_calc$tiers)
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t2fg = case_when(tiers < 2 ~ (.9*final_adequacy_target)-final_resources))
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t2fg = case_when(tiers < 2 ~ (.9*final_adequacy_target)-final_resources))
# Calculate tier 2 allocation rate
t2funding <- naa*.49
t2fgsum <- sum(t2fg,na.rm == T)
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg,na.rm == T)
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t2fg = case_when(tiers < 2 ~ ((.9*final_adequacy_target)-final_resources)-(1- final_adj_lct)))
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
t2allocationrate <- t2funding
t2allocationrate <- t2funding/t2fgsum
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t1fundinggap = case_when(tiers == 1 ~ (t1tr*final_adequacy_target)-final_resources)) |>
mutate(t1funding = case_when(tiers == 1 ~ t1fundinggap * .3)) |>## ADD TIER 1`FUNDING AND FUNDING GAP.
mutate(t2fg = case_when(tiers < 2 ~ ((.9*final_adequacy_target)-final_resources-t1funding)-(1- final_adj_lct)))
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t1fundinggap = case_when(tiers == 1 ~ (t1tr*final_adequacy_target)-final_resources)) |>
mutate(t1funding = case_when(tiers == 1 ~ t1fundinggap * .3)) |>.
mutate(t2fg = case_when(tiers < 3 ~ ((.9*final_adequacy_target)-final_resources-t1funding)-(1- final_adj_lct)))
# Calculate tier 2 allocation rate
# LOOK INTO THE tier 2 funding/funding gap equations -----
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
sum(ebf_base_calc$t1fundinggap)
sum(ebf_base_calc$t1fundinggap,na.rm = T)
print(500000000-(sum(ebf_base_calc$t1fundinggap,na.rm = T)))
if(ebf_base_calc$tier == 1) {nrow(ebf_base_calc$tiers)}
# PURPOSE ---------
#   Function to determine tier 1 ratio.
# PREPARED BY ------
# Chris Poulos
# 2022-10-19
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# tier 1 target ratio threshold function
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
gap(t1tr) # test out the the funding adequacy level cut off
print(t1fg - gap(t1tr)) # this will tell you how off we are, it should be 0
# use the target ratio to assign tiers and tier2 funding gap----
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t1fundinggap = case_when(tiers == 1 ~ (t1tr*final_adequacy_target)-final_resources)) |>
mutate(t1funding = case_when(tiers == 1 ~ t1fundinggap * .3)) |>.
mutate(t2fg = case_when(tiers < 3 ~ ((.9*final_adequacy_target)-final_resources-t1funding)-(1- final_adj_lct)))
# Calculate tier 2 allocation rate
# LOOK INTO THE tier 2 funding/funding gap equations -----
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
### SOMETHING ISN"T WORKING IN THE EQUATIONS ABOVE.....t2allocationrate should be ~ .5216066
t2allocationrate <- t2funding/t2fgsum
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 400000000
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 100000000
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
print t1tr
print(t1tr)
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 200000000
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
print(t1tr)
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 400000000
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
print(t1tr)
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 800000000
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 400000000
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
print(t1tr)
h year).
naa <- 800000000
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
print(t1tr)
naa <- 1600000000
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
print(t1tr)
naa <- 3200000000
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
print(t1tr)
glimpse(ebf_base_calc)
naa <- 300000000 # new appropriation allocation
t1funding <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1funding/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
gap(t1tr) # test out the the funding adequacy level cut off
print(t1fg - gap(t1tr)) # this will tell you how off we are, it should be 0
# use the target ratio to assign tiers and tier2 funding gap----
ebf_base_calc <- ebf_base_calc |>
mutate(tiers = case_when(adequacy_funding_level < as.numeric(t1tr) ~ 1,
adequacy_funding_level > as.numeric(t1tr) & adequacy_funding_level < .9 ~ 2,
adequacy_funding_level > .9 & adequacy_funding_level < 1 ~ 3,
adequacy_funding_level > 1 ~ 4,
FALSE ~ 0)) |>
mutate(t1fundinggap = case_when(tiers == 1 ~ (t1tr*final_adequacy_target)-final_resources)) |>
mutate(t1funding = case_when(tiers == 1 ~ t1fundinggap * .3)) |>
mutate(t2fg = case_when(tiers < 3 ~ ((.9*final_adequacy_target)-final_resources-t1funding)-(1- local_cap_ratio_capped90)))
# Calculate tier 2 allocation rate
# LOOK INTO THE tier 2 funding/funding gap equations -----
t2funding <- naa*.49
t2fgsum <- sum(ebf_base_calc$t2fg, na.rm = T)
t2allocationrate <- t2funding/t2fgsum
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.0000000000000000000001, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
gap(t1tr) # test out the the funding adequacy level cut off
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.0000000000000000000000000000000000000000000000000000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
gap(t1tr) # test out the the funding adequacy level cut off
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001)
}
tr_table <- targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.0000000000000000000000000000000000000000000000000000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
t1tr <- tr_table$minimum # Create a variable that pulls the $minimum (i.e the tier 1 target ratio threshold)
gap(t1tr) # test out the the funding adequacy level cut off
shiny::runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
shiny::runApp('scripts/shiny/ebf_sim')
shiny::runApp('scripts/shiny/ebf_sim')
shiny::runApp('scripts/shiny/ebf_sim')
shiny::runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('scripts/shiny/ebf_sim')
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/plotly_test')
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/poulos_hw_class2_1a')
runApp()
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/poulos_hw_class2_1a')
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/poulos_hw_class2_1a')
il_data <- read_rds("data/il_data.rds")
getwd()
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/poulos_hw_class2_1a')
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/poulos_hw_class2_1a')
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/poulos_hw_class2_1a')
runApp('D:/IRRPP/bw_ed_finance/lessons/course_2_class_1/course_2_class_1/poulos_hw_class2_1a')
