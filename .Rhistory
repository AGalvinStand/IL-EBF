orig_revised_step2_funding <- 0.981
ebf_base_calc <- ebf_base_calc |>
mutate(tier2_funding_step3 =
tier2_funding_step2 * orig_revised_step2_funding)
# Final Tier 2 Per Student
ebf_base_calc <- ebf_base_calc |>
mutate(tier2_perpupil_final =
ifelse(total_ase>0,
tier2_funding_step3/total_ase,
0))
# Tier 3 funding
ebf_base_calc <- ebf_base_calc |>
mutate(tier3_funding =
ifelse(tier == 3, tier3_far*final_adequacy_target,
0))
ebf_base_calc <- ebf_base_calc |>
mutate(tier3_perpupil =
ifelse(total_ase>0,
tier3_funding/total_ase,
0))
# Tier 4 funding
ebf_base_calc <- ebf_base_calc |>
mutate(tier4_funding =
ifelse(tier == 4, tier4_far*final_adequacy_target,
0))
ebf_base_calc <- ebf_base_calc |>
mutate(tier3_perpupil =
ifelse(total_ase>0,
tier4_funding/total_ase,
0))
# Calculating total state contribution --------------
# Calculated new FY Funding
ebf_base_calc <- ebf_base_calc |>
mutate(new_fy_funding =
tier1_funding +
tier2_funding_step3 +
tier3_funding +
tier4_funding)
# Calculated new FY Funding (per pupil)
ebf_base_calc <- ebf_base_calc |>
mutate(new_fy_funding_perpupil =
ifelse(total_ase >0,
new_fy_funding/total_ase,
0))
# Total gross state FY contribution
ebf_base_calc <- ebf_base_calc |>
mutate(gross_fy_funding =
new_fy_funding +
base_funding_minimum)
# Note: there is a variable FY21 EBF adjustments, which has no values for
#       any district. However there is an additional variable
#       "Total NET FY 22 State Contribution" which is the total gross fy state
#       contribution plus the EBF adjustment. For the time being I am going to
#       ignore this, but it is something to look into. (Chris Poulos, 8/26/22)
rm(cwi,
il_fy22_region_factor_clean,
il_fy22_region_factor_raw,
new_names,
orig_revised_step2_funding,
t1,
t2,
t2fin,
t3,
t4,
tier1,
tier1_far,
tier2,
tier2_far,
tier3,
tier3_far,
tier4_far)
glimpse(ebf_base_calc)
test <- ebf_base_calc |>
mutate(blah = cumsum(adequacy_funding_gap))
View(test)
test$blah <- 1
test$blah <- ave(test$final_percent_adequacy,FUN=cumsum)
test$id <- cumsum(test[13])
source("scripts/ebf_base_calc.R")
gap <- function(y) {
mutate(gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)
}
tr <- function(x, lower, upper) {
if(ebf_base_calc$final_percent_adequacy < y){
return(cumsum(ebf_base_calc$gap))
}
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
tr <- function(x, lower, upper) {
if(ebf_base_calc$final_percent_adequacy < y){
return(cumsum(ebf_base_calc$gap))
}
optimize(function(z) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
gap <- function(y) {
mutate(gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)
if(ebf_base_calc$final_percent_adequacy < y){
return(cumsum(ebf_base_calc$gap))
}
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
tr(500000000, 0.600000000000000, .800000000000000)
gap <- function(y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
if(ebf_base_calc$final_percent_adequacy < y){
return(cumsum(ebf_base_calc$gap))
}
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
tr(500000000, 0.600000000000000, .800000000000000)
tr(500000000, 0.600000000000000, .800000000000000)
tr(500000000, 0.600000000000000, .800000000000000)
gap <- function(y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
return(ifelse(ebf_base_calc$final_percent_adequacy < y,cumsum(ebf_base_calc$gap),0))
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
gap <- function(y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
return(ifelse(ebf_base_calc$final_percent_adequacy < y,cumsum(ebf_base_calc$gap),0))
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
source("scripts/ebf_base_calc.R")
gap <- function(y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
return(ifelse(ebf_base_calc$final_percent_adequacy < y,cumsum(ebf_base_calc$gap),0))
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
gap <- function(y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
ifelse(ebf_base_calc$final_percent_adequacy < y,cumsum(ebf_base_calc$gap),0))
}
gap <- function(y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
ifelse(ebf_base_calc$final_percent_adequacy < y,cumsum(ebf_base_calc$gap),0)
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
gap <- function(y) {
if(ebf_base_calc$final_percent_adequacy < y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
}
gap(.7)
gap <- function(y) {
if(ebf_base_calc$final_percent_adequacy < y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
}
}
sfdsfsadf
>
gap <- function(y) {
if(ebf_base_calc$final_percent_adequacy < y) {
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
}
}
gap(.7)
gap <- function(y) {
ifelse(ebf_base_calc$final_percent_adequacy < y, (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources, 0)
}
gap(.7)
gap <- function(y) {
ebf_base_calc$gap <- ifelse(ebf_base_calc$final_percent_adequacy < y, (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources, 0)
}
gap(.7)
View(ebf_base_calc)
gap <- function(y) {
ebf_base_calc$gap <- case_when(ebf_base_calc$final_percent_adequacy < y ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
}
glimpse(ebf_base_calc$ga)
gap <- function(y) {
ebf_base_calc$gap <- case_when(ebf_base_calc$final_percent_adequacy < y ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
}
gap(.7)
source("scripts/ebf_base_calc.R")
gap <- function(y) {
ifelse(ebf_base_calc$final_percent_adequacy < y, cumsum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources), 0)
}
gap(.7)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
gap <- function(y) {
ebf_base_calc$gap <- case_when(y < ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
}
gap(.7)
source("scripts/ebf_base_calc.R")
gap <- function(y) {
ebf_base_calc$gap <- case_when(y < ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
return(sum(ebf_base_calc$gap))
}
gap <- function(y) {
ebf_base_calc$gap <- case_when(y < ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
a <- sum(ebf_base_calc$gap))
}
gap <- function(y) {
ebf_base_calc$gap <- case_when(y < ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
a <- sum(ebf_base_calc$gap)
}
gap(.7)
gap <- function(y) {
mutate(ebf_base_calc$gap = case_when(y > ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0))
a <- sum(ebf_base_calc$gap)
}
gap <- function(y) {
mutate(ebf_base_calc$gap = case_when(y > ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0))
a <- sum(ebf_base_calc$gap)
}
ebf_base_calc$gap <- 1
gap <- function(y) {
ebf_base_calc$gap <- case_when(y > ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
a <- sum(ebf_base_calc$gap)
}
gap(.7)
gap <- function(y) {
ebf_base_calc |>
gap <- y
}
gap <- function(y) {
ebf_base_calc$gap <- y
}
gap(.7)
gap <- function(y) {
ebf_base_calc$gap = y
}
gap(.7)
ebf_base_calc$gap <- function(y) {
y
}
ebf_base_calc$gap <- function(y) {
return(y)
}
gap <- function(y) {
return(y)
}
gap(.7)
gap <- function(y) {
return(y)
mutate(ebf_base_calc$gap = y)
}
gap <- function(y) {
return(y)
mutate(ebf_base_calc$gap = y)
}
gap <- function(y) {
return(y)
mutate(ebf_base_calc$gap = y)
gap <- function(y) {
return(y)
mutate(ebf_base_calc$gap = y)
}
gap <- function(y) {
return(y)
ebf_base_calc$gap <- y
}
gap(.7)
gap <- function(y) {
return(y)
ebf_base_calc$gape <- y
}
gap(.7)
gap <- function(y) {
a<-y
if(ebf_base_calc$final_percent_adequacy < y) {
return(sum((a*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources))
}
gap <- function(y) {
a<-y
if(ebf_base_calc$final_percent_adequacy < y) {
return(sum((a*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources))
}
}
fsafds
d
>
gap <- function(y) {
a<-y
if(ebf_base_calc$final_percent_adequacy < y) {
return(sum((a*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources))
}
}
gap(.7)
source("scripts/ebf_base_calc.R")
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy)
gap <- function(y) {
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy)]
if(ebf_base_calc$final_percent_adequacy < y) {
return(sum((a*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources))
}
}
return(y)
ebf_base_calc$gape <- y
}
case_when(y > ebf_base_calc$final_adequacy_target ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
a <- sum(ebf_base_calc$gap)
}
ifelse(ebf_base_calc$final_percent_adequacy < y, cumsum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources), 0)
}
ebf_base_calc$gap <- case_when(ebf_base_calc$final_percent_adequacy < y ~ (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,
FALSE ~ 0)
}
ifelse(ebf_base_calc$final_percent_adequacy < y, (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources, 0)
}
gap(.7)
ebf_base_calc$gap = (y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
ifelse(ebf_base_calc$final_percent_adequacy < y,cumsum(ebf_base_calc$gap),0)
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy)]
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy),]
glimpse(ebf_base_calc)
ebf_base_calc <- ebf_base_calc[order(final_percent_adequacy),]
ebf_base_calc <- ebf_base_calc[order(ebf_base_calc$final_percent_adequacy),]
ebf_base_calc <- ebf_base_calc |>
mutate(id = row_number())
View(ebf_base_calc)
row_number()
row_number(ebf_base_calc)
ebf_base_calc <- cbind(id=1:nrow(ebf_base_calc),ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
rownames(ebf_base_calc) <- 1:nrow(ebf_base_calc)
ebf_base_calc <- ebf_base_calc |>
mutate(id = 1:n())
ebf_base_calc2 <- ebf_base_calc |>
mutate(id = 1:n())
ebf_base_calc <- ebf_base_calc |>
mutate(id2 = 1:n())
ebf_base_calc <- ebf_base_calc |>
mutate(id2 = seq_len(n()))
source("scripts/ebf_base_calc.R")
ebf_base_calc %>% mutate(id = seq_along(final_percent_adequacy))
ebf_base_calc <- ebf_base_calc[order(ebf_base_calc$final_percent_adequacy),]
ebf_base_calc$id <- 1:nrow(ebf_base_calc)
View(ebf_base_calc)
gap <- function(y) {
ifelse(ebf_base_calc$final_percent_adequacy < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)))
}
gap(.7)
gap(.67)
gap(0.693572181637349)
ebf_base_calc <- ebf_base_calc[order(ebf_base_calc$adequacy_funding_level),]
ebf_base_calc$id <- 1:nrow(ebf_base_calc)
gap <- function(y) {
ifelse(ebf_base_calc$adequacy_funding_level < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)))
}
gap(0.693572181637349)
gap <- function(y) {
ifelse(ebf_base_calc$adequacy_funding_level < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources)),0)
}
gap(0.693572181637349)
ebf_base_calc$blah <- (.6*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level <.6 ~ ((.6*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
sum(ebf_base_calc$blah)
sum(ebf_base_calc$blah,na.rm = TRUE)
gap <- function(y) {
ifelse(ebf_base_calc$adequacy_funding_level < y,return(sum((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources,na.rm = TRUE)),0)
}
gap(0.693572181637349)
#gap(0.693572181637349)
gap(.6)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
}
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah))
}
gap(.6)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
}
gap(.6)
gap(0.693572181637349)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
ebf_base_calc$tier1flag <- case_when(ebf_base_calc$adequacy_funding_level < y ~ 1,
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
}
gap(0.693572181637349)
View(ebf_base_calc)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
tier1cutoff <- y
}
gap(0.693572181637349)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(500000000, 0.600000000000000, .800000000000000)
gap(0.6942236)
tr(200000000, 0.600000000000000, .800000000000000)
gap(0.6667053)
gap <- function(y) {
ebf_base_calc$blah <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$blah, na.rm = TRUE))
}
gap(0.6667053)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper)
}
tr(200000000, 0.600000000000000, .800000000000000)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.0000000000001)
}
tr(200000000, 0.600000000000000, .800000000000000)
gap(0.6666971)
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr(200000000, 0.600000000000000, .800000000000000)
tr(200000000, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000,
1)
gap(0.6666972) # test out the the funding adequacy level cut off
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
tr <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr(200000000, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
tr(500000000, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
gap(0.6942345) # test out the the funding adequacy level cut off
gap(.8)
print(500000000-499999842)
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1ar <- t1naa/.3 # tier 1 appropriation rate (30% of funding gap)
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
tr(t1ar, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the high point to be searched (100% adequacy level cut off)
gap(0.6942345) # test out the the funding adequacy level cut off
# bring in ebf_base_calc dataframe ----
source("scripts/ebf_base_calc.R")
# This will return a sum of the optimal cut off percent.
# It does so by summing the funding gap model -
# sum of (tier 1 target ratio * final adequacy level)-final resources for each
# district below the cut off percent selected.
gap <- function(y) {
ebf_base_calc$t1cutoff <- case_when(ebf_base_calc$adequacy_funding_level < y ~ ((y*ebf_base_calc$final_adequacy_target)-ebf_base_calc$final_resources),
FALSE ~ 0)
return(sum(ebf_base_calc$t1cutoff, na.rm = TRUE))
}
# Set the variables for tier funding - only hard code the statutorily set
# variables and the new allocation amount (subject to change via the
# legislature each year).
naa <- 300000000 # new appropriation allocation
t1naa <- naa*.5 # tier 1 new appropriation allocation (50% of NAA, statutorily set)
t1fg <- t1naa/.3 # tier 1 funding gap, which is equal to the  (30% of funding gap)
# This plugs in percentages from 0 to 1 until it finds the optimal cut off,
# which is the funding gap (see below for equation) minus x (the funding gap)
# so that the optimal percent is when the gap minum the gap = 0
targetratio <- function(x, lower, upper) {
optimize(function(y) abs(gap(y) - x), lower=lower, upper=upper, tol = 0.000000000000000000000000000000000000000000000000000000000001)
}
# This finals
targetratio(t1fg, # set the first number as the total tier 1 funding gap = (new appropriation allocation*.5)/.3, in other words the new tier 1 funding (half of the new allocation amount, that's statutory) divided by the tier 1 allocation rate (30% which is statutory)
0.00000000000000, # the low point to be searched (0% adequacy level cut off)
1) # the hig
gap(0.6942345) # test out the the funding adequacy level cut off
print(t1fg - gap(0.6942345)) # this will tell you how off we are
