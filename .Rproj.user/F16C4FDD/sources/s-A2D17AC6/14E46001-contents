# server.R


library(shiny)
library(tidyverse)
library(scales)
library(viridis)
library(plotly)
il_data <- read_rds("data/il_data.rds")

shinyServer(function(input, output, session) {
  
  # Function to select district
  
  # observe({
  #   updateSelectizeInput(
  #     session,
  #     "select_dist",
  #     selected = "Township High School District 214"
  #     )
  #   
  # 
  # })

  df <- reactive({ # You may want a better naming convention that "df".
    if(input$select_dist == "") { # if no district is selected...
      il_data                     # use all the data.
    } else {                      # otherwise (that is if any districts are selected)...
      il_data |>                  # filter...
        filter(il_data$`Dist. name` == input$select_dist) # for district name equal to the selected input.
    } # close out the if then statement
  }) # close out the reactive function.

  # Functions to alter the plot_ly markers based on the variable
  
  #title
  
  name <- il_data$`Dist. name`
  pctnw <- il_data$`Percent non-white`
  slrpp <- il_data$`State and local revenue (per pupil)`
  lrpp <- il_data$`Local revenue (per pupil)`
  srpp <- il_data$`State revenue (per pupil)`
  stpov <- il_data$`Percent student poverty`
  rev <- il_data$`State and local revenue`
  locrev <- il_data$`Local revenue`
  locper <- il_data$`Local revenue as percent of state and local revenue`
  mhi <- il_data$`Median household income`
  mpv <- il_data$`Median property value`

  ttlx <- reactive({
    if(input$xvar == "Median property value"){
      return("<b> Median property value <b>")
    }else if(input$xvar == "Median household income"){
      return("<b> Median household income <b>")
    }else if (input$xvar == "Percent student poverty"){
      return("<b> Percent student poverty <b>")
    }else if (input$xvar == "State and local revenue (per pupil)"){
      return("<b> State and local revenue (per pupil) <b>")
    }else if (input$xvar == "Local revenue as percent of state and local revenue"){
      return("<b> Local revenue as percent of state and local revenue <b>")
    }else{
      return("In progress")
    }
  })

  ttly <- reactive({
    if(input$yvar == "Median property value"){
      return("<b> Median property value <b>")
    }else if(input$yvar == "Median household income"){
      return("<b> Median household income <b>")
    }else if (input$yvar == "Percent student poverty"){
      return("<b> Percent student poverty <b>")
    }else if (input$yvar == "State and local revenue (per pupil)"){
      return("<b> State and local revenue (per pupil) <b>")
    }else if (input$yvar == "Local revenue as percent of state and local revenue"){
      return("<b> Local revenue as percent of state and local revenue <b>")
    }else{
      return("In progress")
    }
  })

  #suffix (in the future could add a prefix for $)

  suffx <- reactive({
    if(input$xvar == "Median property value"){
      return("$")
    }else if(input$xvar == "Median household income"){
      return("$")
    }else if (input$xvar == "Percent student poverty"){
      return("%")
    }else if(input$xvar == "State and local revenue (per pupil)"){
      return("$")
    }else if (input$xvar == "Local revenue as percent of state and local revenue"){
      return("%")
    }else{
      return("In progress")
    }
  })

  suffy <- reactive({
    if(input$yvar == "Median property value"){
      return("$")
    }else if(input$yvar == "Median household income"){
      return("$")
    }else if (input$yvar == "Percent student poverty"){
      return("%")
    }else if(input$yvar == "State and local revenue (per pupil)"){
      return("$")
    }else if (input$yvar == "Local revenue as percent of state and local revenue"){
      return("%")
    }else{
      return("In progress")
    }
  })

  # upper end of the range ( for percentages 100)

  ranx <- reactive({
    if(input$xvar == "Median property value"){
      return(as.numeric((1.05*max(il_data$`Median property value`,na.rm=T))))
    }else if(input$xvar == "Median household income"){
      return(as.numeric((1.05*max(il_data$`Median household income`,na.rm=T))))
    }else if (input$xvar == "Percent student poverty"){
      return(as.numeric((1.05*max(il_data$`Percent student poverty`,na.rm=T))))
    }else if(input$xvar == "State and local revenue (per pupil)"){
      return(as.numeric((1.05*max(il_data$`State and local revenue (per pupil)`,na.rm=T))))
    }else if(input$xvar == "Local revenue as percent of state and local revenue"){
      return(as.numeric((1.05*max(il_data$`Local revenue as percent of state and local revenue`,na.rm=T))))
    }else{
      return("In progress")
    }
  })

  rany <- reactive({
    if(input$yvar == "Median property value"){
      return(as.numeric((1.05*max(il_data$`Median property value`,na.rm=T))))
    }else if(input$yvar == "Median household income"){
      return(as.numeric((1.05*max(il_data$`Median household income`,na.rm=T))))
    }else if (input$yvar == "Percent student poverty"){
      return(as.numeric((1.05*max(il_data$`Percent student poverty`,na.rm=T))))
    }else if(input$yvar == "State and local revenue (per pupil)"){
      return(as.numeric((1.05*max(il_data$`State and local revenue (per pupil)`,na.rm=T))))
    }else if(input$yvar == "Local revenue as percent of state and local revenue"){
      return(as.numeric((1.05*max(il_data$`Local revenue as percent of state and local revenue`,na.rm=T))))
    }else{
      return("In progress")
    }
  })

  
  # output$select_dist <- renderUI({
  #   
  #   selectizeInput("select_dist","Select your district, or type in your district (fully or partially, e.g. 'dist 210')", choices = unique(il_data$`Dist. name`), options = list(onInitialize = I('function() { this.setValue(""); }')))
  # })
  
  # alphy <- reactive({
  #   il_data |>
  #     filter(il_data$`Dist. name` == input$select_dist)
  # })
  #   
  #   if(input$select_dist == il_data$`Dist. name`) {
  #     return(input$select_dist)
  #   } else {
  #     blah2 <- il_data |>
  #       filter(il_data$`Dist. name` == input$select_dist)
  #   }
  # })  
  
  output$x_variable <- renderUI({
    
    varSelectInput("xvar","X-axis: ", il_data, selected = "Percent student poverty")
  })
  
  output$y_variable <- renderUI({
    
    varSelectInput("yvar","Y-axis: ", il_data, selected = "State and local revenue (per pupil)")
  })  
    
    
    #output$funding_plot <- renderPlotly({
    
    # if(input$select_dist != ""){
      
      # plot_ly(df(),
      #         x = df()[[input$Xvar]],
      #         y = df()[[input$yvar]],
      #         alpha = .9,
      #         size = 4.5,
      #         hovertemplate = paste("<b>",
      #                               name,
      #                               "</b><br>",
      #                               "State and local revenue: ",
      #                               dollar(rev, accuracy = 1),
      #                               "<br>",
      #                               "Percent local revenue: ",
      #                               percent(locper/100, accuracy = .1),
      #                               "<br>",
      #                               "Poverty Rate: ",
      #                               percent(stpov/100, accuracy = .1),
      #                               "<br>",
      #                               "Percent non-white: ",
      #                               percent(pctnw/100, accuracy = .1),
      #                               "<br>",
      #                               "Median household income: ",
      #                               dollar(mhi),
      #                               "<br>",
      #                               "Median property value: ",
      #                               dollar(mpv),
      #                               "<extra></extra>")) |>
              # marker = list(color = ~pctnw,
              #               colorbar = list(title = "<b> Percent non-white <b>"),
              #               colorscale='Viridis',
              #               showscale = TRUE )) |>
        # layout(xaxis = list(title=ttlx(),ticksuffix = suffx(), fixedrange = TRUE, range = c(0,ranx())),
        #        yaxis = list(title=ttly(),ticksuffix = suffy(), fixedrange = TRUE, range = c(0,rany())))
# #     
# #NOTE----
# # When a district is selected most of the hovertemplate info is "NA". I cannot figure out why.
#       
# 
#     }else if(input$select_dist != ""){

      
  output$funding_plot <- renderPlotly({
    
      plot_ly(df(),
              x = df()[[input$xvar]],
              y = df()[[input$yvar]],
              alpha = case_when(input$select_dist == df()$name ~ .2,
                                input$select_dist != df()$name ~ .2),
              size = 5,
              hovertemplate = paste("<b>",
                                    name,
                                    "</b><br>",
                                    "State and local revenue: ",
                                    dollar(rev, accuracy = 1),
                                    "<br>",
                                    "Percent local revenue: ",
                                    percent(locper/100, accuracy = .1),
                                    "<br>",
                                    "Poverty Rate: ",
                                    percent(stpov/100, accuracy = .1),
                                    "<br>",
                                    "Percent non-white: ",
                                    percent(pctnw/100, accuracy = .1),
                                    "<br>",
                                    "Median household income: ",
                                    dollar(mhi),
                                    "<br>",
                                    "Median property value: ",
                                    dollar(mpv),
                                    "<extra></extra>")) |>
        layout(xaxis = list(title=ttlx(),ticksuffix = suffx(), fixedrange = TRUE, range = c(0,ranx())),
               yaxis = list(title=ttly(),ticksuffix = suffy(), fixedrange = TRUE, range = c(0,rany())))
    # }
  })
  
})




